{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil\fcharset0 Verdana;}{\f1\fnil\fcharset204 Verdana;}{\f2\fnil\fcharset1 Cambria Math;}{\f3\fnil Verdana;}{\f4\fnil\fcharset0 Cambria Math;}}
{\*\generator Riched20 10.0.17134}{\*\mmathPr\mmathFont2\mwrapIndent1440 }\viewkind4\uc1 
\pard\sl276\slmult1\qj\f0\fs20\lang9\par
\b What is Object Oriented Programming?\par
\b0 Object-oriented programming (or OOP) is a programming paradigm or style of programming. It relies on the concept of objects, which are abstract entities that consist of internal state (also known variously as attributes, properties, or instance variables), as well as behaviour (the functions or methods that act on the internal state).\par
\par
\b What are main features of OOP?\par
\b0 Encapsulation\par
Inheritance\par
Polymorphism\par
Abstraction\par
\par
\b What is encapsulation?\par
\b0\lang1033 Encapsulation is containing and hiding information about an object, such as internal data structures and code. Encapsulation isolates the internal complexity of an object's operation from the rest of the application.\par
\par
\b What is inheritance?\par
\b0 Inheritance allows one class to reuse the state and behavior of another class. The derived class inherits the properties and method implementations of the base class and extends it by overriding methods and adding additional properties and methods.\par
\par
\b What is \lang9 polymorphism\lang1033 ?\par
\b0 Polymorphism is a feature of OOPs that allows the object to behave differently in different conditions. In C++ we have two types of polymorphism:\par
- Compile time polymorphism is based on function and operator overloading.\par
- Runtime Polymorphism is based on function overriding.\par
\par
\b What is a\lang9 bstraction?\lang1033\par
\b0 Abstraction refers to hiding the internal implementation and exhibiting only the necessary details. Through the process of abstraction, a programmer hides all but the relevant data about an object in order to reduce complexity and increase efficiency.\par
\par
\b What is a class?\par
\b0 Class is a blue print which reflects the entities attributes and actions. Technically defining a class is designing an user defined data type.\par
\par
\b What is an abstract class in C++?\par
\b0 A class with at least one pure virtual function is called as abstract class. We cannot instantiate an abstract class.\par
\par
\b What is a pure virtual function?\par
\b0 A virtual function with no function body and assigned with a value zero is called as pure virtual function.\par
\par
\b What is an object?\par
\b0 An instance of the class is called as object.\par
\par
\b List the types of inheritance supported in C++.\par
\ul\b0 Single Inheritance\ulnone . A derived class with only one base class is called single inheritance.\par
\ul Multilevel Inheritance\ulnone . A derived class with one base class and that base class is a derived class of another is called multilevel inheritance.\par
\ul Multiple Inheritance\ulnone . A derived class with multiple base class is called multiple inheritance.\par
\ul Heirarchical Inheritance\ulnone . Multiple derived classes with same base class is called hierarchical inheritance.\par
\ul Hybrid Inheritance\ulnone . Combination of multiple and hierarchical inheritance is called hybrid inheritance.\par
\ul Multipath Inheritance\ulnone . A derived class with two base classes and these two base classes have one common base class is called multipath inheritance.\par
\par
\b What is Access Modifiers in a class in C++?\par
\b0 Access modifiers (or Access Specifiers) in a class are used to set the accessibility of the class members. There are 3 types of access modifiers available in C++:\par
\ul Public\ulnone . All the class members declared under public will be available to everyone.\par
\ul Private\ulnone . The class members declared as private can be accessed only by the functions inside the class. \par
\ul Protected\ulnone . Protected access modifier is similar to that of private access modifiers, the difference is that the class member declared as Protected are inaccessible outside the class but they can be accessed by any subclass (derived class) of that class.\par
\par
\b What is an inline function?\par
\b0 If a function is inline, the compiler places a copy of the code of that function at each point where the function is called at compile time. If function is big (in term of executable instruction etc) then, compiler can ignore the \ldblquote inline\rdblquote  request and treat the function as normal function.\par
\par
\b What is a reference variable in C++?\par
\b0 A reference variable is an alias name for the existing variable. Which mean both the variable name and reference variable point to the same memory location.\par
\par
\b What are the operators used to access the class members?\par
\b0 The pointer-to-member operators, .* and ->* (dot and arrow operator).\par
\par
\b What is function overloading?\par
\b0 Overloaded functions - functions having same name but different arguments. Overloaded functions may or may not have different return type.\par
\par
\b\f1\lang1049 What is function overriding?\par
\b0 Function Overriding\f0\lang1033  - i\f1\lang1049 t is the redefinition of base class function in its derived class with same signature i.e return type and parameters.\par
\par
\b\f0\lang1033 Do we have a String primitive data type in C++?\par
\b0 No, it\rquote s a class from standart library.\par
\par
\b When a class member is defined outside the class, which operator can be used to associate the function definition to a particular class?\par
\b0 Scope resolution operator, double colon operator (::)\par
\par
\b What is constructor?\par
\b0 A constructor is a member function of a class which initializes objects of a class. In C++, Constructor is automatically called when object (instance of class) create. Features: \par
\f1\lang1049 - \f0\lang1033 Constructor has same name as the class itself\par
\f1\lang1049 - \f0\lang1033 Constructors don\rquote t have return type\par
\f1\lang1049 - \f0\lang1033 A constructor is automatically called when an object is created.\par
\f1\lang1049 - \f0\lang1033 If we do not specify a constructor, C++ compiler generates a default constructor for us\par
Types of Constructors:\par
\ul Default Constructor\ulnone . Default constructor is the constructor which doesn\rquote t take any argument. It has no parameters. Even if we do not define any constructor explicitly, the compiler will automatically provide a default constructor implicitly.\par
\ul Parameterized Constructor\ulnone . A constructor which has parameters is called parameterized constructor.\par
\ul Copy Constructor\ulnone . A copy constructor is a member function which initializes an object using another object of the same class.\par
\ul Move constructor\ulnone . A move constructor is a constructor whose first parameter is rvalue-reference.\par
\par
\b What is destructor?\par
\b0 A destructor is a special member function that is called when the lifetime of an object ends. The purpose of the destructor is to free the resources that the object may have acquired during its lifetime.\par
It cannot be overloaded and the only form is without the parameters.\par
\par
\b What is virtual destructor?\par
\b0 Deleting a derived class object using a pointer to a base class that has a non-virtual destructor results in undefined behavior. To correct this situation, the base class should be defined with a virtual destructor.\par
\par
\b Which operator can be used in C++ to allocate dynamic memory?\par
\b0 The new operator provides dynamic storage allocation.\par
\par
\b What is the purpose of \lquote delete\rquote  operator?\par
\b0 delete operator is used to release the dynamic memory which was created using new operator.\par
\par
\b What is a friend function?\par
\b0 Friend function can be given special grant to access private and protected members. A friend function can be:\par
- A method of another class\par
- A global function\par
\par
\b\f1\lang1049 What is a friend class?\par
\b0 A friend class can access private and protected members of other class in which it is declared as friend.\f0\lang1033\par
\par
\b What is the 'this' pointer?\par
\b0\lquote this\rquote  pointer is a constant pointer that holds the memory address of the current object. \lquote this\rquote  pointer is not available in static member functions as static member functions can be called without any object (with class name).\par
\par
\b\f1\lang1049 What is the difference between the keywords struct and class in C++?\par
\b0 The only difference between a struct and class in C++ is the default accessibility of member variables and methods. In a struct they are public; in a class they are private.\par
\par
\b What is a namespace?\par
\b0 A namespace is the logical division of the code which can be used to resolve the name conflict of the identifiers by placing them under different name space.\par
\par
\b\f0\lang1033 What is a template?\par
\b0 A template is a C++ programming feature that permits function and class operations with generic types, which allows functionality with different data types without rewriting entire code blocks for each type.\par
\par
\b\f1\lang1049 What is a class template?\par
\b0 A class template defines a family of classes.\f0\lang1033  \f1\lang1049 A class template provides a specification for generating classes based on parameters.\f0\lang1033  \f1\lang1049 A class template is instantiated by passing a given set of types to it as template arguments.\par
\par
\b What is a \f0\lang1033 function\f1\lang1049  template?\b0\par
\f0\lang1033 A function template defines a family of functions. A function template behaves like a function except that the template can have arguments of many different types.\par
\par
\b\f1\lang1049 What is a \f0\lang1033 function\f1\lang1049  template?\b0\par
\f0\lang1033 This allows a variable value to be computed at compile time and used as such without casting it.\par
\f1\lang1049\par
\b\f0\lang1033 What are template parameters?\f1\lang1049\par
\b0 Templates are parametrized by one or more template parameters, of three kinds: type template parameters, non-type template parameters, and template template parameters.\par
\par
\b\f0\lang1033 What is a template parameter pack?\par
\b0 A template parameter pack is a template parameter that accepts zero or more template arguments.\par
\f1\lang1049\par
\b\f0\lang1033 What are template keywords in C++?\f1\lang1049\par
\b0\f0\lang1033 template, typename, class\f1\lang1049\par
\par
\b\f0\lang1033 Difference between typename and class in templates?\f1\lang1049\par
\b0\f0\lang1033 There is no semantic difference between class and typename in a template-parameter.\par
\par
\b Why a non-type template parameter should be a constant integral expression?\par
\b0 Non-constant expressions can't be parsed and substituted during compile-time.\par
\par
\b What is a container class?\par
\b0 Container class is a class designed to hold and organize multiple instances of another type (either another class, or a fundamental type). By far the most commonly used container in programming is the array, which you have already seen many examples of. Although C++ has built-in array functionality, programmers will often use an array container class (std::array or std::vector) instead because of the additional benefits they provide.\par
\par
\b What is a preprocessor?\par
\b0 Preprocessor programs provides preprocessors directives which tell the compiler to preprocess the source code before compiling. All of these preprocessor directive begins with a '#' (hash) symbol.\par
\par
\b What are the different ways of passing parameters to the functions? Which to use when?\par
\b0 Call by value \f2\u8722?\f0  we send only values to the function as parameters.\par
Call by address \f2\u8722?\f0  we send address of the actual parameters instead of values.\par
Call by reference \f2\u8722?\f0  the actual parameters are received with the C++ new reference variables as formal parameters.\par
\par
\b\f1\lang1049 Can we resize the allocated memory which was allocated using \f3\lquote\f1 new\f3\rquote\f1  operator?\par
\b0 No, there is no such provision available.\par
\f0\lang1033\par
\b\f1\lang1049 Which operator can be used to determine the size of a data type/class or variable/object?\par
\b0 sizeof\par
\f0\lang1033\par
\b\f1\lang1049 What is recursion?\par
\b0 Function calling itself is called as recursion.\par
\f0\lang1033\par
\b\f1\lang1049 What is the difference between delete and delete[]?\par
\b0\f0\lang1033 The delete operator deallocates memory and calls the destructor for a single object created with new.\par
The delete [] operator deallocates memory and calls destructors for an array of objects created with new [].\par
\par
\b\f1\lang1049 Is it legal to assign a base class object to a derived class pointer?\par
\b0 No, it will be error as the compiler fails to do conversion.\par
\f0\lang1033\par
\b\f1\lang1049 What is the full form of STL?\par
\b0 Standard template library\par
\par
\b What is the use of the keyword \f3\lquote\f1 using\f3\rquote\f1 ?\par
\b0 It is used to specify the namespace being used in.\par
\f0\lang1033 A\f4  \f0 typedef\f4 -\f0 name\f4  \f0 can\f4  \f0 also\f4  \f0 be\f4  \f0 introduced\f4  \f0 by\f4  \f0 an\f4  \f0 alias\f4 -\f0 declaration\f4 .\par
\par
\b\f1\lang1049 What is difference between including the header file with-in angular braces < > and double quotes \f3\ldblquote\f1  \f3\ldblquote\f0\lang1033 ?\f1\lang1049\par
\b0 If a header file is included with in <> then the compiler searches for the particular header file only with in the built in include path. If a header file is included with in \f3\ldblquote\f1  \f3\ldblquote\f1 , then the compiler searches for the particular header file first in the current working directory, if not found then in the built in include path\f0\lang1033 .\par
\par
\b\f1\lang1049 What is the difference between variable declaration\f0\lang1033 , \f1\lang1049 definition\f0\lang1033 , initialization and assignment\f1\lang1049 ?\par
\ul\b0\f0\lang1033 Declaration\ulnone . \f1\lang1049 A declaration\f0\lang1033  \f1\lang1049 introduces one or more names into a program\f0\lang1033 :\f1\lang1049\par

\pard\li720\sl276\slmult1\qj void xyz();\par
class klass;\par
struct ztruct;\par
int x;\par

\pard\sl276\slmult1\qj\ul\f0\lang1033 Definition\ulnone . Definitions\f1\lang1049  \f0\lang1033 specify what code or data the name describes. The compiler needs the definition in order to allocate storage space for the thing that is being declared.\par

\pard\li720\sl276\slmult1\qj int x;\par
void xyz() \{...\}\par
class klass \{...\};\par
struct ztruct \{...\};\par
enum \{ x, y, z \};\par

\pard\sl276\slmult1\qj\ul Initialization\ulnone . Initialization of a variable provides its initial value at the time of construction.\par
\ul Assignment\ulnone . The assignment statement indicates that the value given by the expression on the right hand side of the assignment operator (symbol =) must be stored in the variable named on the left hand side.\par
\par
\b\f1\lang1049 Which key word is used to perform unconditional branching?\par
\b0 The goto statement transfers control to the location specified by label. The goto statement must be in the same function as the label it is referring, it may appear before or after the label.\f0\lang1033\par
The goto statement gives power to jump to any part of program but, makes the logic of the program complex and tangled. In modern programming, goto statement is considered a harmful construct and a bad programming practice.\f1\lang1049\par
\f0\lang1033\par
\b What is big-endian and little-endian?\par
\b0 Big-endian and little-endian are terms that describe the order in which a sequence of bytes are stored in computer memory. Big-endian is an order in which the "big end" (most significant value in the sequence) is stored first (at the lowest storage address). Little-endian is an order in which the "little end" (least significant value in the sequence) is stored first. For example, in a big-endian computer, the two bytes required for the hexadecimal number 4F52 would be stored as 4F52 in storage (if 4F is stored at storage address 1000, for example, 52 will be at address 1001). In a little-endian system, it would be stored as 524F (52 at address 1000, 4F at 1001).\par
\par
\b What's the difference between MSB and LSB?\par
\b0 T\f1\lang1049 he most significant bit (MSB) is the bit which has the largest value in a multi-bit binary number.\f0\lang1033  T\f1\lang1049 he least significant bit is the bit which is farthest to the right and holds the least value in a multi-bit binary number.\par
\f0\lang1033\par
\b What is a token?\par
\b0 A token is the smallest element of a program that is meaningful to the compiler. Tokens can be classified as follows: keywords, identifiers, constants, strings, special symbols, operators.\par
\par
\b What is const_cast conversion?\par
\b0 A const_cast operator adds or removes a const or volatile modifier to or from a type.\par
\par
\b What is static_cast conversion?\par
\b0 The static_cast operator performs an explicit type conversion. Static_cast conversions are checked at compile time to prevent obvious incompatibilities.\par
\par
\b What is dynamic_cast conversion?\par
\b0 Safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.\par
\par
\b What is reinterpret_cast conversion?\par
\b0 Allows any pointer to be converted into any other pointer type. Also allows any integral type to be converted into any pointer type and vice versa.\par
\par
\b What is the difference between static_cast and dynamic_cast convertion?\par
\b0 dynamic_cast should be used for converting pointers/references within an inheritance hierarchy, static_cast should be used for ordinary type conversions.\par
\par
\b Explain the purpose of the keyword volatile.\par
\b0 Declaring a variable volatile directs the compiler that the variable can be changed externally. Hence avoiding compiler optimization on the variable reference.\par
\par
\b What is a storage class?\par
\b0 Storage class of a variable defines the lifetime and visibility of a variable. Lifetime means the duration till which the variable remains active and visibility defines in which module of the program the variable is accessible.\par
\par
\b Mention the storage classes names in C++.\par
\b0 There are five types of storage classes in C++. They are:\f1\lang1049  \f0\lang1033 automatic,\f1\lang1049  \f0\lang1033 external,\f1\lang1049  \f0\lang1033 static,\f1\lang1049  \f0\lang1033 register,\f1\lang1049  \f0\lang1033 mutable.\par
\par
\b Where an automatic variable is stored?\par
\b0 Every local variable by default being an auto variable is stored in stack memory.\par
\par
\b What is the purpose of extern storage specifier?\par
\b0 The extern keyword tells the compiler that a variable is declared in another source module (outside of the current scope). The linker then finds this actual declaration and sets up the extern variable to point to the correct location.\par
\par
\b What is role of static keyword?\par
\ul\b0 Static global variable\ulnone . A variable declared as static at the top level of a source file is only visible throughout that file.\par
\ul Static function\ulnone . Static function - a function declared as static at the top level of a source file - is only visible throughout that file.\par
\ul Static local variables\ulnone . A variable declared static within the body of a function maintains its value between invocations of the function.\par
\ul Static member variables\ulnone . Static data members of class are those members which are shared by all the objects. Static member variables (data members) are not initialied using constructor, because these are not dependent on object initialization.\par
\ul Static method\ulnone . Static method - a method declared as static inside a class definition - are meant to be relevant to all instances of a class rather than any specific instance.\par
\par
\b When should we use the register storage specifier?\par
\b0 The register storage class specifier indicates to the compiler that the object should be stored in a machine register. The register storage class specifier is typically specified for heavily used variables, such as a loop control variable, in the hopes of enhancing performance by minimizing access time. However, the compiler is not required to honor this request.\par
\par
\b What is the role of mutable storage class specifier?\par
\b0 If a data member is declared mutable, then it is legal to assign a value to this data member from a const member function.\par
\par
\b Distinguish between shallow copy and deep copy.\par
\b0 Shallow copy\f1\lang1049  (also known as a \f0\lang1033 b\f1\lang1049 itwise copy)\f0\lang1033  does memory dumping bit-by-bit from one object to another. Deep copy (\f1\lang1049 also known as a \f0\lang1033 memberwise \f1\lang1049 copy)\f0\lang1033  is copy field by field from object to another. Deep copy is achieved using copy constructor and or overloading assignment operator.\par
\par
\b Name the data type which can be used to store wide characters in C++.\par
\b0 wchar_t\par
\par
\b What is operator overloading?\par
\b0 Operator overloading customizes the C++ operators for operands of user-defined types.\par
\par
\b Name the default standard streams in C++.\par
\b0 cin, cout, cerr and clog.\par
\par
\b Which access specifier/s can help to achive data hiding in C++?\par
\b0 Private & Protected.\par
\par
\b Can I use \lquote delete\rquote  operator to release the memory which was allocated using malloc() function of C language?\par
\b0 No, we need to use free() of C language for the same.\par
\par
\b\f1\lang1049 Can we implement all the concepts of OOPS using the keyword struct?\par
\b0 Yes.\par
\par
\b What is the block scope variable in C++?\par
\b0 An object has block scope if its declaration is located inside a block. An object with block scope is visible from the point where it is declared\f0\lang1033  (opening brace "\{")\f1\lang1049  to the closing brace \f0\lang1033 "\f1\lang1049\}\f0\lang1033 "\f1\lang1049  that terminates the block.\par
\par
\b What is the scope resolution operator?\par
\b0 In C++, scope resolution operator is ::\f0\lang1033  (double colon)\f1\lang1049 . It is used for following purposes\f0\lang1033 :\par
- To access a global variable when there is a local variable with same name.\par
- \f1\lang1049 To define a function outside a class.\par
\f0\lang1033 - \f1\lang1049 To access a class\rquote s static variables.\par
\f0\lang1033 - In case of multiple Inheritance.\f1\lang1049\par
\par
\b What are command line arguments?\par
\b0 Command-line arguments\f0\lang1033  \f1\lang1049 are passed to a program at runtime by the operating system when the program is requested by another program, such as a command interpreter ("shell") like cmd.exe on Windows or bash on Linux\f0\lang1033 . \f1\lang1049 All the arguments sent are the strings only.\f0\lang1033\par
\par
\b What is exception?\par
\b0 A C++ exception is a response to an exceptional circumstance that arises while a program is running, such as an attempt to divide by zero. Exceptions provide a way to transfer control from one part of a program to another. C++ exception handling is built upon three keywords: try, catch, and throw.\f1\lang1049\par
\par
\b\f0\lang1033 Does C++ supports exception handling?\par
\b0 C++ exception handling is built upon three keywords: try, catch, and throw.\par
\ul try\ulnone  \f2\u8722?\f0  A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.\ul\lang1033\par
catch\ulnone  \f2\u8722?\f0  A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.\par
\ul\lang1033 throw\ulnone  \f2\u8722?\f0  A program throws an exception when a problem shows up. This is done using a throw keyword.\par
\f1\lang1049\par
\par
\b How can we catch all kind of exceptions in a single catch block?\par
\b0 catch (...)\f0\lang1033  will catch all C++ exceptions.\f1\lang1049\par
\par
\b What is keyword auto for \f0\lang1033 in C?\f1\lang1049\par
\b0\f0\lang1033 Auto def\f1\lang1049 ines a local variable as having a local lifetime. \f0\lang1033 By defa\f1\lang1049 ult every local variable of the function is automatic (auto).\par
\par
\b What is keyword auto for \f0\lang1033 in C++?\f1\lang1049\par
\b0\f0\lang1033 Deduces the type of a declared variable from its initialization expression.\par
\par
\b What is the meaning of base address of the array?\par
\b0 Base address is the address of the first element of the array.\par
\par
\b Can a program be compiled without main() function?\par
\b0 Within standard C++ a main function is required.\par
\par
\b What is remainder\f1\lang1049  \f0\lang1033 for 5.0 % 2?\par
\b0 Error. The modulus operator cannot be used for floating-type variables\par
\par
\b Which compiler switch to be used for compiling the programs using math library with g++ compiler?\par
\b0\f1\lang1049 g++ \f3\endash\f1 lm <file.cpp>\par
That's a linker option. It tells the linker to link with (-l) the m library. That's the math library.\par
\par
\b Who designed C++ programming language?\par
\b0 Bjarne Stroustrup.\par
\par
\b How can we refer to the global variable if the local and the global variable names are same?\par
\b0 We can apply scope resolution operator (::) to the for the scope of global variable.\par
\par
\b\f0\lang1033 What is pointer?\par
\b0 Pointer is a variable that stores the address of another variable.\par
\par
\b What is "address of" operator?\par
\b0 The \lang9 ampersand\lang1033  (&) is a unary operator that returns the memory address of its operand. It should be read as "the address of".\par
\par
\b What is indirection operator?\par
\b0\f1\lang1049 It is a unary operator that returns the value of the variable located at the address specified by its operand.\par
\par
\b What are valid operations on pointers?\par
\ul\b0 Creation\par
Assignment\ulnone\par
\ul Arithmetic\ulnone\par
\f0\lang1033\tab - Incrementing and decrementing a pointer.\par
\tab - Adding or subtracting an integer.\f1\lang1049\par
\ul Comparison\ulnone\par
\f0\lang1033\tab - Pointers to entries of the same array can be compared using ==, !=, \tab\tab <, >, etc.\par
\tab - Any pointer can be compared with 0.\par
\ul Indirection\ulnone\par
\ul Indexing\ulnone\f1\lang1049\par
\par
\b What are available mode of inheritance to inherit one class from another?\par
\b0 Public, private \f0\lang1033 and\f1\lang1049  protected\f0\lang1033 .\f1\lang1049\par
\par
\par
\b Does an abstract class in C++ need to hold all pure virtual functions?\par
\b0 Not necessarily, a class having at least one pure virtual function is abstract class too.\par
\par
\b What happens if an exception is thrown outside a try block?\par
\b0 An exception that isn't caught will always terminate the program\f0\lang1033 .\f1\lang1049\par
\par
\b Are class functions taken into consideration as part of the object size?\par
\b0 No, only the class member variables determines the size of the respective class object.\par
\par
\b Can we create and empty class? If so what would be the size of such object.\par
\b0 We can create an empty class and the object size will be 1.\par
\par
\b What is std?\par
\b0\f0\lang1033 Std is namespace of the C++ standard library.\f1\lang1049\par
\par
\b What is cout?\par
\b0 cout is the object of ostream class. The stream \f3\lquote\f1 cout\f3\rquote\f1  is by default connected to console output device.\par
\par
\b What is cin?\par
\b0 cin is the object of istream class. The stream \f3\lquote\f1 cin\f3\rquote\f1  is by default connected to console input device.\par
\par
\b If a pointer declared for a class, which operator can be used to access its class members?\par
\b0 Arrow (->) operator can be used\f0\lang1033 .\f1\lang1049\par
\par
\b What is the difference between actual \f0\lang1033 parameters (arguments) \f1\lang1049 and formal parameters?\par
\b0 When a function is called, the values (expressions) that are passed in the call are called the arguments or actual parameters (both terms mean the same thing).\par
Formal parameters are written in the function prototype and function header of the definition. Formal parameters are local variables which are assigned values from the arguments when the function is called.\par
\par
\b Is 068 a valid octal number?\par
\b0 No, it contains invalid octal digits.\par
\par
\b What is the purpose of #undef preprocessor?\par
\b0 It will be used to undefine an existing macro definition.\par
\par
\b Can we nest multi line comments in a C++ code?\par
\b0 Multi-line comments start with /* and end with */\f0\lang1033 .\f1\lang1049\par
\par
\b What is the order of objects destroyed in the memory?\par
\b0 The objects are destroyed in the reverse order of their creation.\par
\par
\b\f0\lang1033 What is a struct?\par
\b0 Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collecion of data of different data types.\par
\par
\b What is a union?\f1\lang1049\par
\b0 Union is similar to struct, unions differ in the aspect that the fields of a union share the same position in memory. The size of the union is the size of its largest field\f0\lang1033 .\f1\lang1049\par
\par
\b\f0\lang1033 What is RAII?\par
\b0 Resource Acquisition Is Initialization or RAII, is a C++ programming technique. RAII guarantees that the resource is available to any function that may access the object (resource availability is a class invariant, eliminating redundant runtime tests). It also guarantees that all resources are released when the lifetime of their controlling object ends, in reverse order of acquisition. Likewise, if resource acquisition fails (the constructor exits with an exception), all resources acquired by every fully-constructed member and base subobject are released in reverse order of initialization.\par
\par
\b What is const keyword?\par
\ul\b0 Const values\ulnone . The const keyword specifies that a variable's value is constant and tells the compiler to prevent the programmer from modifying it.\par
\ul Const member functions\ulnone . Declaring a member function with the const keyword specifies that the function is a "read-only" function that does not modify the object for which it is called.\par
\par
\par
\b What is sizeof operator?\par
\b0 The sizeof is a compile-time operator that determines the size, in bytes, of a variable or data type. The result of the sizeof operator is of type size_t.\par
\par
\b What is sizeof... operator?\par
\b0 The sizeof is a compile-time operator that determines the number of elements in a template parameter pack.\f1\lang1049\par
\par
\b\f0\lang1033 What is a dangling pointer?\par
\b0 A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer.\f1\lang1049\par
\par
\b\f0\lang1033 What is a dangling reference?\par
\b0\f1\lang1049 A dangling reference is a reference to an object that no longer exists\f0\lang1033 .\par
\par
\b What is a wild pointer?\par
\b0 Uninitialized pointers are known as wild pointers because they point to some arbitrary memory location and may cause a program to crash or behave badly.\f1\lang1049\par
\par
\par
\par
\f0\lang1033 === rule of three\par
=== rule of five\par
=== Rule of zero\par
\f1\lang1049 === Delegating constructors in c++\par
=== Move Assignment Operators \par
=== \'ed\'e0\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f2\'ee\'f0\'ee\'e2\f0\lang1033\par
=== explicit, implicit constructors\par
=== deleted constructors\par
\f1\lang1049 === deducing template arguments\par
\f0\lang1033\par
}
 